(function(){
  function el(id){return document.getElementById(id)}
  function val(id){const x=el(id);return x?x.value.trim():""}
  function checked(id){const x=el(id);return x?x.checked:false}
  function outEl(){return document.getElementById("soapTextOut")||document.getElementById("jsonOut")}

  
function parseVitalsFrom(text){
  const out={}; const T=String(text||"");
  let m;
  m=T.match(/\b(?:BP|blood\s*pressure)\s*[:=]?\s*([0-9]{2,3}\s*[\/-]\s*[0-9]{2,3})(?!\d)\b/i);
  if(m) out.BP=m[1].replace(/\s+/g,'');
  m=T.match(/\b(?:HR|heart\s*rate|pulse)\s*[:=]?\s*([0-9]{2,3})(?:\s*bpm)?\b/i);
  if(m) out.HR=m[1];
  m=T.match(/\b(?:RR|resp(?:irations)?|resp(?:iratory)?(?:\s*rate)?)\s*[:=\s]\s*([0-9]{1,3})(?!\d)\b/i);
  if(m) out.RR=m[1];
  return out;
}


  const VITAL_KEYS=new Set(["BP","BLOOD PRESSURE","HR","PULSE","RR","RESP","RESPIRATIONS","SPO2","SAO2","O2","TEMP","TEMPERATURE"]);
  function parseLabsList(text){
    const out={}; const T="\n"+String(text||"")+"\n";
    const re=/(^|\n)\s*([A-Za-z][A-Za-z0-9 /+\-%]{1,32})\s*(?::|=)\s*([^\n,;]+)(?=\n|$|,|;)/g;
    let m;
    while((m=re.exec(T))){
      const k=m[2].trim().replace(/\s+/g,' ');
      if(VITAL_KEYS.has(k.toUpperCase())) continue;
      const v=m[3].trim();
      if(k && v) out[k]=v;
    }
    return out;
  }

  function labsTextareaToObj(txt){
    const out={};
    (String(txt||"").split(/\r?\n/)).forEach(line=>{
      const i=line.indexOf("="); if(i<=0) return;
      const k=line.slice(0,i).trim(); const v=line.slice(i+1).trim();
      if(k && v) out[k]=v;
    });
    return out;
  }

  function objToLabsLines(obj){
    return Object.entries(obj).map(([k,v])=>`${k}=${v}`).join("\n");
  }

  function buildPayload(){
    const payload={
      rawText: val('rawText'),
      patientHistory: val('patientHistory'),
      specialty: (el('specialty')?.value)||'General Practice',
      allowInference: checked('allowInference'),
      model: (el('model')?.value)||null
    };
    const vitals={};
    if(val('vBP')) vitals.BP=val('vBP');
    if(val('vHR')) vitals.HR=val('vHR');
    if(val('vRR')) vitals.RR=val('vRR');
    if(!Object.keys(vitals).length){
      Object.assign(vitals, parseVitalsFrom(payload.rawText+"\n"+payload.patientHistory));
    }
    if(Object.keys(vitals).length) payload.vitals=vitals;

    let labs=labsTextareaToObj(val('labs'));
    if(!Object.keys(labs).length){
      labs=parseLabsList(payload.rawText+"\n"+payload.patientHistory);
    }
    if(Object.keys(labs).length) payload.labs=labs;

    const imaging=(el('imaging')?.value||'').split(/\r?\n/).map(s=>s.trim()).filter(Boolean);
    if(imaging.length) payload.imaging=imaging;

    return payload;
  }

  function showNoteText(text){
    const out=outEl(); if(!out) return;
    out.textContent = text || "No output.";
    out.style.whiteSpace='pre-wrap';
    out.style.overflowWrap='anywhere';
    out.style.maxWidth='100%';
    out.style.background='#fff';
  }

  function showICD(list){
    const box=el('icdOut'); if(!box) return;
    const enabled=checked('includeICD');
    if(!enabled){ box.textContent='ICD-10 suggestions disabled.'; return; }
    if(!Array.isArray(list) || !list.length){ box.textContent='No suggestions.'; return; }
    box.innerHTML='<ul>'+list.map(x=>`<li><b>${x.code}</b> â€” ${x.term}</li>`).join('')+'</ul>';
  }

  async function generate(){
    const status=el('status'); if(status) status.textContent='Generating...';
    try{
      const payload=buildPayload();

      const rA=await fetch('/api/generate-soap-json-annotated',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});
      const jA=await rA.json();

      const rT=await fetch('/api/generate-soap',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});
      const jT=await rT.json();

      let noteText = jT && jT.soapNote;
      if(!noteText && jA && jA.data){
        const d=jA.data;
        noteText = `Subjective:\n${d.Subjective||'Not provided'}\n\nObjective:\n${d.Objective||'Not provided'}\n\nAssessment:\n${d.Assessment||'Not provided'}\n\nPlan:\n${d.Plan||'Not provided'}\n`;
      }
      showNoteText(noteText);
      showICD(jA.icd||[]);
    }catch(err){
      showNoteText("Error: "+err.message);
    }finally{
      const status2=el('status'); if(status2) status2.textContent='';
    }
  }

  function autofillFromHPI(){
    const hpi = val('rawText')+"\n"+val('patientHistory');
    const v=parseVitalsFrom(hpi);
    if(v.BP && !val('vBP')) el('vBP').value=v.BP;
    if(v.HR && !val('vHR')) el('vHR').value=v.HR;
    if(v.RR && !val('vRR')) el('vRR').value=v.RR;
    if(!val('labs')){
      const labs=parseLabsList(hpi);
      if(Object.keys(labs).length) el('labs').value = objToLabsLines(labs);
    }
  }

  function savePrefs(){
    try{
      const m=el('model'); const s=el('specialty'); const ai=el('allowInference');
      if(m) localStorage.setItem('model', m.value||'');
      if(s) localStorage.setItem('specialty', s.value||'');
      if(ai) localStorage.setItem('allowInference', ai.checked ? '1' : '0');
    }catch(e){}
  }
  function loadPrefs(){
    try{
      const sm=localStorage.getItem('model'); const ss=localStorage.getItem('specialty'); const sai=localStorage.getItem('allowInference');
      const m=el('model'); const s=el('specialty'); const ai=el('allowInference');
      if(m && sm && Array.from(m.options).some(o=>o.value===sm)) m.value=sm;
      if(s && ss && Array.from(s.options).some(o=>o.value===ss)) s.value=ss;
      if(ai && sai!==null) ai.checked=(sai==='1');
    }catch(e){}
  }

  document.addEventListener('DOMContentLoaded', ()=>{
    const hpi=el('rawText');
    const hx=el('patientHistory');
    if(hpi) hpi.addEventListener('input', autofillFromHPI);
    if(hx)  hx.addEventListener('input', autofillFromHPI);
    if(hpi) hpi.addEventListener('keydown', function(e){
      if(e.key==='Enter' && !e.shiftKey && !e.ctrlKey && !e.metaKey){
        e.preventDefault();
        (async()=>{ await generate(); const sn=el('saveNote'); if(sn) sn.click(); })();
      }
    });
    const m=el('model'); const s=el('specialty'); const ai=el('allowInference');
    if(m) m.addEventListener('change', savePrefs);
    if(s) s.addEventListener('change', savePrefs);
    if(ai) ai.addEventListener('change', savePrefs);
    loadPrefs();
    setTimeout(loadPrefs, 300);
    setTimeout(autofillFromHPI, 0);
    const out=outEl(); if(out){ out.style.whiteSpace='pre-wrap'; out.style.overflowWrap='anywhere'; out.style.maxWidth='100%'; out.style.background='#fff'; }
  });
})();


(function(){
  document.addEventListener('DOMContentLoaded',function(){
    var gen=document.getElementById('genJson');
    if(gen){ gen.style.display='none'; }
    var cc=document.getElementById('rawText');
    if(cc) cc.addEventListener('keydown',function(e){
      if(e.key==='Enter' && !e.shiftKey){
        e.preventDefault();
        var g=document.getElementById('genJson'); if(g) g.click();
        setTimeout(function(){ var sn=document.getElementById('saveNote'); if(sn) sn.click(); },200);
      }
    });
  });
})();

